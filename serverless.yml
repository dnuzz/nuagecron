service: nuagecron

frameworkVersion: '2 || 3'

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  websiteBucket: ${env:WEBSITE_BUCKET}
  servicename: ${file(./servicename.json):servicename} 
  pythonRequirements:
    dockerizePip: true
    dockerfile: Dockerfile
    slim: true
  wsgi:
    app: api.app.app
    packRequirements: false

package:
  exclude:
    - node_modules/**
    - frontend/**
  include:
    - servicename.json
    - frontend/build/index.html

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: '20201221'
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ SchedulesTable, Arn ]
            - Fn::Join: [ '/', ['Fn::GetAtt': [ SchedulesTable, Arn ], 'index', '*']]
            - Fn::GetAtt: [ ExecutionsTable, Arn ]
            - Fn::Join: [ '/', ['Fn::GetAtt': [ ExecutionsTable, Arn ], 'index', '*']]
        - Effect: Allow
          Action:
            - lambda:*
          Resource:
            - "*"
  environment:
    SCHEDULES_TABLE: ${self:custom.servicename}-schedules
    EXECUTIONS_TABLE: ${self:custom.servicename}-executions

functions:
  api:
    name: ${self:custom.servicename}-api-handler
    handler: api.wsgi_handler.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
      - http:
          path: /
          method: ANY
  tick:
    name: ${self:custom.servicename}-tick
    handler: nuagecron.adapters.aws.lambdas.tick_lambda_handler
    events:
      - schedule: rate(2 hours)
  executor:
    name: ${self:custom.servicename}-executor
    handler: nuagecron.adapters.aws.lambdas.executor_lambda_handler
  updater:
    name: ${self:custom.servicename}-updater
    handler: nuagecron.adapters.aws.lambdas.executor_lambda_handler

plugins:
  - serverless-wsgi
  - serverless-python-requirements

resources:
  Resources:
    SchedulesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: schedule_id
            AttributeType: S
          - AttributeName: enabled
            AttributeType: S
          - AttributeName: next_run
            AttributeType: 'N'
          - AttributeName: project_stack
            AttributeType: S
        KeySchema:
          - AttributeName: schedule_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.servicename}-schedules
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.servicename}-schedules-enabled
            KeySchema:
              - AttributeName: enabled
                KeyType: HASH
              - AttributeName: next_run
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
          - IndexName: ${self:custom.servicename}-schedules-project-stack
            KeySchema:
              - AttributeName: project_stack
                KeyType: HASH
            Projection:
              ProjectionType: 'KEYS_ONLY'
    ExecutionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: schedule_id
            AttributeType: S
          - AttributeName: execution_time
            AttributeType: 'N'
          - AttributeName: execution_id
            AttributeType: S
        KeySchema:
          - AttributeName: schedule_id
            KeyType: HASH
          - AttributeName: execution_time
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.servicename}-executions
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.servicename}-executions-execution-id
            KeySchema:
              - AttributeName: execution_id
                KeyType: HASH
            Projection:
              ProjectionType: 'KEYS_ONLY'
    WebsiteBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
          BucketName: '${self:custom.websiteBucket}'
          AccessControl: 'PublicRead'
          WebsiteConfiguration:
            IndexDocument: 'index.html'
            ErrorDocument: 'index.html'
    WebsiteDistribution:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
          DistributionConfig:
            DefaultCacheBehavior:
                TargetOriginId: 'WebsiteBucketOrigin'
                ViewerProtocolPolicy: 'redirect-to-https'
                DefaultTTL: 600 # ten minutes
                MaxTTL: 600 # ten minutes
                Compress: true
                ForwardedValues:
                  QueryString: false
                  Cookies:
                      Forward: 'none'
            CacheBehaviors:
                - TargetOriginId: 'ApiGatewayOrigin'
                  ViewerProtocolPolicy: 'redirect-to-https'
                  Compress: true
                  PathPattern: /api*
                  ForwardedValues:
                    QueryString: true
                    Cookies:
                        Forward: 'none'
            DefaultRootObject: 'index.html'
            Enabled: true
            PriceClass: 'PriceClass_100'
            HttpVersion: 'http2'
            ViewerCertificate:
                CloudFrontDefaultCertificate: true
            Origins:
                - Id: 'WebsiteBucketOrigin'
                  DomainName: { 'Fn::GetAtt': [ 'WebsiteBucket', 'DomainName' ] }
                  S3OriginConfig: {}
                - Id: 'ApiGatewayOrigin'
                  DomainName: { "Fn::Join" : ["", [{ "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com" ] ]  }
                  OriginPath: '/${self:custom.stage}'
                  CustomOriginConfig:
                    OriginProtocolPolicy: match-viewer